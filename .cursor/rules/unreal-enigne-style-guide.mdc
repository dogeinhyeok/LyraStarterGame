---
description: 
globs: *.cpp,*.hpp
alwaysApply: false
---
## 언리얼 엔진 5 스타일 가이드라인

이 문서는 언리얼 엔진 5 프로젝트에서 일관된 코딩 스타일과 구조를 유지하기 위한 가이드라인입니다. 에픽 게임즈의 공식 C++ 코딩 표준과 커뮤니티에서 널리 사용되는 Allar의 UE5 스타일 가이드를 참고하여 작성되었습니다.

- https://dev.epicgames.com/documentation/en-us/unreal-engine/epic-cplusplus-coding-standard-for-unreal-engine
- https://github.com/Allar/ue5-style-guide

본 문서에서 다루지 않는 C++ 코딩 표준과 관련된 내용은 구글 C++ 스타일 가이드를 참고하세요:

- https://google.github.io/styleguide/cppguide.html

## 1. 기본 원칙

### 1.1 일관성 유지

프로젝트 내에서 일관된 스타일과 규칙을 적용하세요. 일부 규칙은 개인이나 팀의 선호도에 따라 달라질 수 있지만, 한 번 결정된 규칙은
프로젝트 전체에 일관되게 적용해야 합니다.

### 1.2 명확성

코드는 단순하고 명확하게 작성하세요. 복잡하거나 현란한 코드보다 이해하기 쉬운 코드가 더 중요합니다.

### 1.3 문서화

코드, 클래스, 함수, 변수 등에 적절한 주석과 문서를 작성하세요. 특히 API나 외부에서 사용되는 기능은 반드시 문서화해야 합니다.

### 1.4 엔진 표준 준수

언리얼 엔진에서 이미 확립된 패턴과 규칙을 따르세요. 이는 다른 개발자들이 코드를 쉽게 이해하고 협업하는 데 도움이 됩니다.

## 2. 명명 규칙

### 2.1 일반 규칙

- 모든 식별자는 영문으로 작성합니다(한글 주석은 허용).
- 공백이나 특수문자는 사용하지 않습니다.
- 약어는 일반적으로 통용되는 경우에만 사용합니다.

### 2.2 C++ 명명 규칙

#### 2.2.1 클래스와 구조체

클래스와 구조체 이름은 접두어와 함께 파스칼 케이스(PascalCase)로 작성합니다.

- `A`: 액터 클래스 (예: `APlayerController`)
- `U`: 오브젝트 클래스 (예: `UStaticMeshComponent`)
- `F`: 구조체, 비 UObject 클래스 (예: `FHitResult`)
- `E`: 열거형 (예: `ECollisionChannel`)
- `I`: 인터페이스 (예: `IAbilitySystemInterface`)
- `T`: 템플릿 (예: `TArray`)

```cpp
class AMyCharacter : public ACharacter
{
    // ...
};

struct FDamageInfo
{
    // ...
};

enum class EWeaponType : uint8
{
    Melee,
    Ranged,
    Magic
};
```

#### 2.2.2 변수

- 지역 변수: 소문자로 시작하는 카멜 케이스(camelCase)
  ```cpp
  int32 healthValue = 100;
  ```

- 멤버 변수: 접두어 `b`(불리언), `f`(부동소수점), `i`(정수), `n`(다른 숫자 타입), `v`(벡터), `s`(문자열) 등을 사용하고 카멜 케이스로 작성
  ```cpp
  float fDamageMultiplier;
  bool bIsAlive;
  int32 iHealthCurrent;
  FString sPlayerName;
  FVector vStartLocation;
  ```

- UPROPERTY 변수: 카멜 케이스로 작성하되 접두어 없이 사용 가능
  ```cpp
  UPROPERTY(BlueprintReadWrite, Category="Stats")
  float MaxHealth;
  
  UPROPERTY(EditAnywhere, Category="Movement")
  bool CanJump;
  ```

#### 2.2.3 함수

- 함수는 파스칼 케이스로 작성
  ```cpp
  void ApplyDamage(float DamageAmount);
  bool IsCharacterDead() const;
  ```

- 반환 값이 불리언인 함수는 'Is', 'Has', 'Can' 등으로 시작하는 것이 좋습니다.
  ```cpp
  bool IsVisible() const;
  bool HasAmmo() const;
  bool CanJump() const;
  ```

### 2.3 블루프린트 명명 규칙

블루프린트 에셋과 인스턴스는 접두어를 사용하여 구분합니다.

- `BP_`: 블루프린트 클래스 (예: `BP_PlayerCharacter`)
- `BPI_`: 블루프린트 인터페이스 (예: `BPI_Interaction`)
- `ENUM_`: 열거형 (예: `ENUM_DamageType`)
- `S_`: 구조체 (예: `S_ItemInfo`)

### 2.4 에셋 명명 규칙

모든 에셋은 타입에 따른 접두어를 사용합니다.

- `SM_`: 스태틱 메시 (예: `SM_Chair`)
- `SK_`: 스켈레탈 메시 (예: `SK_ManneQuinn`)
- `M_`: 마스터 머티리얼 (예: `M_Metal`)
- `MI_`: 머티리얼 인스턴스 (예: `MI_MetalRed`)
- `T_`: 텍스처 (예: `T_Brick_D` - Diffuse 텍스처)
  - `_D`: Diffuse/Albedo
  - `_N`: Normal
  - `_M`: Mask
  - `_R`: Roughness
  - `_S`: Specular
  - `_AO`: Ambient Occlusion
  - `_H`: Height/Displacement
  - `_E`: Emissive
- `P_`: 파티클 시스템 (예: `P_Fire`)
- `WP_`: 무기 (예: `WP_Rifle`)
- `W_`: UI 위젯 (예: `W_MainMenu`)
- `A_`: 애니메이션 (예: `A_Walk`)
- `AM_`: 애님 몽타주 (예: `AM_Reload`)
- `AS_`: 애님 시퀀스 (예: `AS_JumpStart`)
- `ABP_`: 애님 블루프린트 (예: `ABP_Player`)
- `DA_`: 데이터 에셋 (예: `DA_WeaponStats`)

## 3. 코드 형식

### 3.1 들여쓰기와 간격

- 들여쓰기는 탭이 아닌 스페이스 4칸을 사용합니다.
- 중괄호는 새 줄에 배치합니다.
- 연산자 앞뒤에 공백을 추가합니다.
- 괄호 안의 내용 앞뒤에는 공백을 두지 않습니다.

```cpp
if (Condition)
{
    // 코드
}
else
{
    // 코드
}
```

### 3.2 줄 길이 및 줄바꿈

- 한 줄은 120자를 넘지 않도록 합니다.
- 긴 표현식은 적절히 줄바꿈을 사용하여 가독성을 높입니다.

```cpp
void FunctionWithManyParameters(
    int32 Parameter1,
    float Parameter2,
    bool Parameter3,
    const FString& Parameter4
)
{
    // 코드
}
```

### 3.3 주석 스타일

#### 3.3.1 C++ 주석

- 파일 상단 주석:
  ```cpp
  /**
   * 파일명.h/.cpp
   * 
   * 이 파일은 무엇을 하는 파일인지에 대한 설명입니다.
   * 
   * 작성자: 홍길동
   * 마지막 수정: 2023-01-01
   */
  ```

- 클래스/구조체 주석:
  ```cpp
  /**
   * 플레이어 캐릭터 클래스.
   * 사용자 입력을 처리하고 캐릭터 움직임을 제어합니다.
   */
  class AMyCharacter : public ACharacter
  {
      // ...
  };
  ```

- 함수 주석:
  ```cpp
  /**
   * 캐릭터에게 데미지를 적용합니다.
   * 
   * @param DamageAmount - 적용할 데미지 양
   * @param DamageType - 데미지 타입
   * @param DamageCauser - 데미지를 준 액터
   * 
   * @return 실제로 적용된 데미지 양
   */
  float TakeDamage(float DamageAmount, FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser) override;
  ```

- 라인 주석:
  ```cpp
  // 이 변수는 플레이어의 현재 체력을 저장합니다
  float CurrentHealth;
  
  DoSomething();  // 이 함수는 중요한 작업을 수행합니다
  ```

#### 3.3.2 블루프린트 주석

- 블루프린트 그래프에서는 주석 상자를 사용하여 노드 그룹의 기능을 설명합니다.
- 주석 상자의 색상으로 기능 유형을 구분하는 것이 좋습니다 (예: 빨간색 = 전투 관련, 파란색 = 이동 관련).

### 3.4 UPROPERTY 및 UFUNCTION 매크로

- 모든 프로퍼티 및 함수 매크로는 명확한 범주와 툴팁을 포함해야 합니다.
- 에디터에서 노출되는 프로퍼티는 적절한 편집 제한을 설정하세요.

```cpp
UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Character|Stats", 
          meta=(ClampMin=0.0, ClampMax=100.0, ToolTip="캐릭터의 최대 체력"))
float MaxHealth = 100.0f;

UFUNCTION(BlueprintCallable, Category="Character|Damage", 
          meta=(ToolTip="캐릭터에게 데미지를 적용하고 결과를 반환합니다"))
float ApplyDamage(float DamageAmount);
```

## 4. 코드 구성

### 4.1 헤더 파일 구성

헤더 파일은 다음 순서로 구성하는 것이 좋습니다:

1. 저작권/라이센스 주석
2. 프라이머리 포함 보호 (`#pragma once`)
3. 포함 파일 (언리얼 헤더, 시스템 헤더, 프로젝트 헤더 순)
4. 전방 선언
5. 클래스/구조체 선언
   - 접근 지정자별 그룹화 (public, protected, private)
   - 각 접근 지정자 내에서 다음 순서로 정렬:
     1. UPROPERTY 매크로가 있는 변수
     2. 일반 변수
     3. UFUNCTION 매크로가 있는 함수
     4. 일반 함수

```cpp
// 저작권/라이센스 주석

#pragma once

// 언리얼 헤더
#include "CoreMinimal.h"
#include "GameFramework/Character.h"

// 시스템 헤더
#include <string>

// 프로젝트 헤더
#include "MyGame/Weapons/WeaponBase.h"

// 전방 선언
class UInventoryComponent;

// 클래스 선언
#include "MyCharacter.generated.h"

UCLASS()
class MYGAME_API AMyCharacter : public ACharacter
{
    GENERATED_BODY()

public:
    // 생성자 및 초기화
    AMyCharacter();
    virtual void BeginPlay() override;
    
    // UPROPERTY
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category="Components")
    UInventoryComponent* InventoryComponent;
    
    // 일반 변수
    const float DefaultWalkSpeed = 600.0f;
    
    // UFUNCTION
    UFUNCTION(BlueprintCallable, Category="Movement")
    void SetSprintSpeed(float NewSpeed);
    
    // 일반 함수
    void UpdateMovementAttributes();
    
protected:
    // protected 멤버...
    
private:
    // private 멤버...
};
```

### 4.2 소스 파일 구성

소스 파일은 다음 순서로 구성하는 것이 좋습니다:

1. 저작권/라이센스 주석
2. 해당 헤더 포함
3. 기타 필요한 포함 파일
4. 네임스페이스 (필요한 경우)
5. 정적 변수 및 함수 정의
6. 생성자 및 소멸자
7. 기타 멤버 함수 구현 (가능하면 헤더 파일과 동일한 순서)

```cpp
// 저작권/라이센스 주석

#include "MyCharacter.h"
#include "Components/InventoryComponent.h"
#include "GameFramework/CharacterMovementComponent.h"

// 정적 변수/함수
namespace CharacterConstants
{
    const float MAX_SPRINT_SPEED = 1200.0f;
}

// 생성자
AMyCharacter::AMyCharacter()
{
    // 초기화 코드
}

// 오버라이드 함수
void AMyCharacter::BeginPlay()
{
    Super::BeginPlay();
    // BeginPlay 구현
}

// 기타 함수
void AMyCharacter::SetSprintSpeed(float NewSpeed)
{
    // 구현
}

void AMyCharacter::UpdateMovementAttributes()
{
    // 구현
}
```

## 5. 블루프린트 스타일

### 5.1 블루프린트 그래프 구성

#### 5.1.1 노드 배치

- 실행 흐름은 왼쪽에서 오른쪽으로 진행되도록 합니다.
- 관련 노드는 그룹화하고 주석으로 설명합니다.
- 노드 간 거리를 적절히 유지하여 가독성을 높입니다.

#### 5.1.2 변수 및 함수 구성

- 변수와 함수는 적절한 카테고리로 구분합니다.
- 인스턴스 편집 가능 변수는 범위와 기본값을 명확히 설정합니다.
- 퍼블릭 함수와 변수에는 상세한 툴팁을 제공합니다.

#### 5.1.3 이벤트 그래프 vs 함수

- 이벤트 그래프는 주요 이벤트 핸들링에만 사용합니다.
- 재사용 가능한 기능은 함수로 분리합니다.
- 복잡한 로직은 여러 작은 함수로 나누어 관리합니다.

### 5.2 블루프린트 성능 고려사항

- 틱 이벤트는 꼭 필요한 경우에만 사용합니다.
- 루프와 재귀는 성능에 주의하여 사용합니다.
- 캐스팅은 가능한 한 자주 수행하지 않도록 결과를 캐싱합니다.

## 6. 에셋 관리

### 6.1 폴더 구조

기본적인 폴더 구조는 다음과 같이 구성하는 것이 좋습니다:

```
/Content
  /Characters          - 캐릭터 관련 에셋
    /Player
    /Enemies
    /NPCs
  /Environments        - 환경 관련 에셋
    /Props
    /Vegetation
    /Architecture
  /FX                  - 이펙트 관련 에셋
    /Particles
    /Decals
  /Materials           - 머티리얼 및 텍스처
    /Master            - 마스터 머티리얼
    /Instances         - 머티리얼 인스턴스
    /Textures          - 텍스처
  /Audio               - 오디오 관련 에셋
    /Music
    /SFX
    /Ambience
  /UI                  - UI 관련 에셋
    /HUD
    /Menus
    /Icons
  /Animations          - 애니메이션 관련 에셋
    /Characters
    /Props
  /Blueprints          - 블루프린트 클래스
    /GameFramework     - 게임 프레임워크 관련 BP
    /Interactables     - 상호작용 가능한 오브젝트
    /Weapons           - 무기 관련 BP
  /Maps                - 레벨 및 맵
    /Levels            - 실제 게임 레벨
    /SubLevels         - 서브 레벨
    /TestMaps          - 테스트용 맵
  /Core                - 코어 시스템 관련 에셋
    /DataTables        - 데이터 테이블
    /Enums             - 열거형
    /Structs           - 구조체
  /ThirdParty          - 써드파티 에셋
  /Collections         - 에셋 컬렉션
```

### 6.2 에셋 품질 및 최적화

- 텍스처는 프로젝트에 적합한 해상도로 설정합니다 (일반적으로 2의 제곱수).
- 메시의 LOD(Level of Detail)를 적절히 설정합니다.
- 모든 스태틱 메시는 충돌 설정을 올바르게 구성해야 합니다.
- 머티리얼은 가능한 인스턴스로 사용하고, 복잡한 계산은 텍스처로 미리 구워둡니다.

### 6.3 블루프린트 vs C++

- 핵심 게임플레이 시스템과 성능이 중요한 부분은 C++로 구현합니다.
- 빠른 프로토타입과 디자이너가 수정할 수 있어야 하는 기능은 블루프린트로 구현합니다.
- C++ 기반 클래스를 만들고 블루프린트로 확장하는 방식이 효과적입니다.

## 7. 폴더 구조

### 7.1 소스 코드 구조

```
/Source
  /ProjectName
    /Private             - 소스 파일(.cpp)
      /Characters
      /Components
      /Gameplay
      /UI
      /Weapons
    /Public              - 헤더 파일(.h)
      /Characters
      /Components
      /Gameplay
      /UI
      /Weapons
    /Classes             - 언리얼 클래스(선택 사항)
```

### 7.2 프로젝트 구조

```
/ProjectName
  /Binaries             - 컴파일된 바이너리 파일(자동 생성)
  /Build                - 빌드 관련 파일
  /Config               - 프로젝트 설정 파일
  /Content              - 모든 콘텐츠 에셋
  /DerivedDataCache     - 파생 데이터 캐시(자동 생성)
  /Intermediate         - 중간 빌드 파일(자동 생성)
  /Plugins              - 프로젝트 플러그인
  /Saved                - 자동 저장 및 설정 백업
  /Source               - 모든 소스 코드
  ProjectName.uproject  - 프로젝트 파일
```

## 8. 언리얼 엔진 특화 기능

### 8.1 리플렉션 시스템

리플렉션 시스템을 효과적으로 활용하여 편집기 지원과 블루프린트 연동을 강화하세요.

```cpp
// 블루프린트에서 사용할 구조체
USTRUCT(BlueprintType)
struct FWeaponStats
{
    GENERATED_BODY()
    
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Weapon")
    float Damage = 10.0f;
    
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Weapon")
    float FireRate = 0.5f;
};

// 블루프린트에서 사용할 열거형
UENUM(BlueprintType)
enum class EWeaponType : uint8
{
    Melee UMETA(DisplayName="근접 무기"),
    Ranged UMETA(DisplayName="원거리 무기"),
    Magic UMETA(DisplayName="마법 무기")
};
```

### 8.2 델리게이트 사용

- 이벤트 기반 프로그래밍을 위해 델리게이트를 효과적으로 활용하세요.
- 적절한 델리게이트 유형을 선택하고 명확하게 명명하세요.

```cpp
// 멀티캐스트 델리게이트 선언
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnHealthChanged, float, NewHealth);

// 클래스 내에서 사용
UPROPERTY(BlueprintAssignable, Category="Events")
FOnHealthChanged OnHealthChanged;

// 델리게이트 호출
void AMyCharacter::TakeDamage(float Damage)
{
    Health -= Damage;
    OnHealthChanged.Broadcast(Health);
}
```

### 8.3 인터페이스 활용

- 공통 기능을 인터페이스로 정의하여 코드 재사용성을 높이세요.
- 블루프린트와 C++ 모두에서 사용할 수 있는 인터페이스를 만드세요.

```cpp
// 인터페이스 정의
UINTERFACE(MinimalAPI, BlueprintType)
class UInteractable : public UInterface
{
    GENERATED_BODY()
};

class IInteractable
{
    GENERATED_BODY()
    
public:
    // 순수 가상 함수
    UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category="Interaction")
    void Interact(AActor* Instigator);
};

// 인터페이스 구현
void AInteractableObject::Interact_Implementation(AActor* Instigator)
{
    // 구현
}
```

### 8.4 게임플레이 태그

- 게임플레이 태그를 활용하여 기능을 분류하고 검색하세요.
- 복잡한 상태 또는 속성을 표현할 때 유용합니다.

```cpp
// 게임플레이 태그 컨테이너 선언
UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Tags")
FGameplayTagContainer CharacterTags;

// 태그 검사
bool AMyCharacter::HasStatusEffect() const
{
    return CharacterTags.HasTag(FGameplayTag::RequestGameplayTag(FName("Status.Burning")));
}

// 태그 추가
void AMyCharacter::ApplyBurningEffect()
{
    CharacterTags.AddTag(FGameplayTag::RequestGameplayTag(FName("Status.Burning")));
}
```

## 마무리

이 스타일 가이드는 언리얼 엔진 5 프로젝트의 일관성과 품질을 유지하는 데 도움이 됩니다. 모든 팀원이 이 가이드라인을 따르면 코드 품질이 향상되고 협업이 원활해질 것입니다. 필요에 따라 이 가이드라인을 프로젝트 요구사항에 맞게 조정하되, 일관성을 유지하는 것이 가장 중요합니다.